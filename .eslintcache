[{"C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\App.js":"1","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\users\\create.js":"2","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\index.js":"3","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\reportWebVitals.js":"4","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\index.js":"5","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\users\\edit.js":"6","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\users\\delete.js":"7","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\warehouses\\create.js":"8","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\warehouses\\edit.js":"9","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\warehouses\\delete.js":"10"},{"size":6944,"mtime":1611115820214,"results":"11","hashOfConfig":"12"},{"size":13360,"mtime":1611541828178,"results":"13","hashOfConfig":"12"},{"size":549,"mtime":1611192983636,"results":"14","hashOfConfig":"12"},{"size":362,"mtime":1611026410828,"results":"15","hashOfConfig":"12"},{"size":10741,"mtime":1611552238114,"results":"16","hashOfConfig":"12"},{"size":16305,"mtime":1611549619024,"results":"17","hashOfConfig":"12"},{"size":4141,"mtime":1611551766163,"results":"18","hashOfConfig":"12"},{"size":12508,"mtime":1611543599860,"results":"19","hashOfConfig":"12"},{"size":15682,"mtime":1611550131605,"results":"20","hashOfConfig":"12"},{"size":4063,"mtime":1611551262666,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"1wh3bzv",{"filePath":"25","messages":"26","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\App.js",["51","52","53","54","55","56","57","58","59","60"],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport { ChevronLeft, ChevronRight, PeopleAlt, Edit } from '@material-ui/icons';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport  MainComponent  from './route/index';\n\n/* import Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { DataGrid } from '@material-ui/data-grid';\n\nimport axios from 'axios';\n */\n\n\nconst drawerWidth = 240;\n\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'surname', label: 'ISO\\u00a0Code', minWidth: 100, align: 'center' },\n  {\n    id: 'lastname',\n    label: 'Population',\n    minWidth: 170,\n    align: 'center',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'email',\n    label: 'Size\\u00a0(km\\u00b2)',\n    minWidth: 170,\n    align: 'center',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'phone',\n    label: 'Density',\n    minWidth: 170,\n    align: 'center',\n    format: (value) => value.toFixed(2),\n  },\n];\n\nfunction createData(name, code, population, size) {\n  const density = population / size;\n  return { name, code, population, size, density };\n}\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    height: \"100%\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function MiniDrawer() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  let rows = [\n    {\n      \"name\": \"fabio alberto\",\n      \"surname\": \"mayorga\",\n      \"lastname\": \"duarte\",\n      \"phone\": \"3122969070\",\n      \"bankaccounttype\": 1,\n      \"accountnumber\": \"123456789\",\n      \"identificationnumber\": \"1111\",\n      \"id\": 1\n    }\n  ];\n\n\n  const edit = async (i) => {\n\n    let o = await fetch('http://localhost:4200/user', {\n      method: 'GET',\n      mode: 'cors', // <---\n      cache: 'default'\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then(text => console.log(text));\n\n    this.row = [];\n\n  }\n\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Usuarios y Almacenes\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRight /> : <ChevronLeft />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {['Usuarios', 'Otro1', 'Otro2', 'Otro3'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <PeopleAlt /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {['Otro4', 'Otro5', 'Otro6'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n\n      <MainComponent></MainComponent>\n\n    </div>\n  );\n}","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\users\\create.js",["61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"import { React, Fragment, Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { PersonAdd } from '@material-ui/icons';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nclass CreateUserComponent extends Component {\r\n\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            open: false,\r\n            scroll: 'paper',\r\n\r\n            openTooltip: false,\r\n            tooltopSeverity: 'success',\r\n            tooltopMessage: 'Usuario Creado satisfactoriamente',\r\n\r\n            formFields: {\r\n                names: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                lastname: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                surname: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                phone: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                email: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                identificationnumber: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                identificationtype: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n                bankaccounttype: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n                accountnumber: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleToggle = () => {\r\n        this.setState({ open: !this.state.open })\r\n    }\r\n\r\n    restat = () => {\r\n        console.log(this.state.formFields.names.data.value)\r\n    }\r\n\r\n    create = async () => {\r\n\r\n        let data = {\r\n            names: this.state.formFields.names.data.value,\r\n            surname: this.state.formFields.surname.data.value,\r\n            lastname: this.state.formFields.lastname.data.value,\r\n            email: this.state.formFields.email.data.value,\r\n            identificationnumber: this.state.formFields.identificationnumber.data.value,\r\n            identificationtype: this.state.formFields.identificationtype.data.value,\r\n            accountnumber: this.state.formFields.accountnumber.data.value,\r\n            bankaccounttype: this.state.formFields.bankaccounttype.data.value,\r\n            phone: this.state.formFields.phone.data.value,\r\n        }\r\n\r\n        let o = await fetch('http://localhost:4200/user', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'default',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n\r\n                console.log(response)\r\n                if (response.status == 200 || response.status == 201) {\r\n                    this.setState({ openTooltip: true, tooltopMessage: 'Usuario creado satisfactoriamente.', tooltopSeverity: 'success' })\r\n                    this.handleToggle();\r\n                    this.props.creation();\r\n                } else {\r\n\r\n                    let error = response.json().then(e => {\r\n                        this.setState({ openTooltip: true, tooltopMessage: e.message, tooltopSeverity: 'error' })\r\n                    });\r\n\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { open, scroll } = this.state;\r\n\r\n        return (\r\n\r\n            <Fragment>\r\n\r\n                <Snackbar open={this.state.openTooltip} autoHideDuration={6000} onClose={() => this.setState({ openTooltip: false })}>\r\n                    <Alert onClose={() => this.setState({ openTooltip: false })} severity={this.state.tooltopSeverity}>\r\n                        {this.state.tooltopMessage}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n                <div>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                        style={{ float: 'right', margin: '30px 0px', backgroundColor: '#4CAF50 !important' }}\r\n                        onClick={this.handleToggle}\r\n                        className=\"successButton\"\r\n                        startIcon={<PersonAdd />}\r\n                    > Crear Usuario </Button>\r\n                </div>\r\n\r\n                <Dialog open={open} onClose={this.handleToggle} scroll={scroll} fullWidth={true}>\r\n                    <DialogTitle id=\"scroll-dialog-title\">Creación de usuarios</DialogTitle>\r\n                    <DialogContent dividers={scroll === 'paper'} >\r\n\r\n                        <form noValidate autoComplete=\"off\">\r\n\r\n                            <div style={{ margin: \"8px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.names.data = c }} id=\"names\" label=\"Nombres\"\r\n                                    name=\"names\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.names.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.surname.data = c }} id=\"surname\" label=\"Primer Apellido\"\r\n                                    name=\"surname\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.surname.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.lastname.data = c }} id=\"lastname\" label=\"Segundo Apellido\"\r\n                                    name=\"lastname\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.lastname.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.email.data = c }} id=\"email\" label=\"Email\"\r\n                                    name=\"email\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.email.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.phone.data = c }} id=\"phone\" label=\"Teléfono\"\r\n                                    name=\"phone\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.phone.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n\r\n                                <InputLabel id=\"it-label\">Tipo de documento</InputLabel>\r\n                                <Select\r\n                                    required\r\n                                    labelId=\"it-label\"\r\n                                    id=\"it-select\"\r\n                                    inputRef={(c) => { this.state.formFields.identificationtype.data = c }}\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\"\r\n                                >\r\n                                    <MenuItem value={1}>Cédula de ciudadanía</MenuItem>\r\n                                    <MenuItem value={2}>Cédula de extrangería</MenuItem>\r\n                                    <MenuItem value={3}>Pasaporte</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.identificationnumber.data = c }} id=\"identificationnumber\" label=\"Número documento\"\r\n                                    name=\"identificationnumber\"\r\n                                    type=\"number\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.identificationnumber.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <InputLabel id=\"ac-label\">Tipo de cuenta</InputLabel>\r\n                                <Select\r\n                                    required\r\n                                    labelId=\"ac-label\"\r\n                                    id=\"ac-select\"\r\n                                    inputRef={(c) => { this.state.formFields.bankaccounttype.data = c }}\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\"\r\n                                >\r\n                                    <MenuItem value={1}>Ahorros</MenuItem>\r\n                                    <MenuItem value={2}>Corriente</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required number inputRef={(c) => { this.state.formFields.accountnumber.data = c }} id=\"accountnumber\" label=\"Número de cuenta bancaría\"\r\n                                    name=\"accountnumber\"\r\n                                    type=\"number\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.accountnumber.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                        </form>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n\r\n                        <Button onClick={this.handleToggle} color=\"primary\"> Cancelar </Button>\r\n                        <Button onClick={this.create} variant=\"contained\" color=\"primary\">Crear Usuario</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CreateUserComponent",["75","76"],"C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\index.js",[],"C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\reportWebVitals.js",[],["77","78"],"C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\index.js",["79","80","81","82","83","84","85","86","87"],"import React, { Component } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { ChevronLeft, ChevronRight, PeopleAlt, Edit } from '@material-ui/icons';\r\n\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nimport axios from 'axios';\r\n\r\nimport CreateUserComponent from './users/create';\r\nimport EditUserComponent from './users/edit';\r\nimport DeleteUserComponent from './users/delete'\r\n\r\n\r\nimport CreateWarehouseComponent from './warehouses/create';\r\nimport EditWarehouseComponent from './warehouses/edit';\r\nimport DeleteWarehouseComponent from './warehouses/delete';\r\n\r\nconst columns2 = [\r\n    { id: 'name', label: 'Razón social', minWidth: 170 },\r\n    { id: 'address', label: 'Dirección', minWidth: 100, align: 'center' },\r\n    {\r\n        id: 'phone',\r\n        label: 'Telefono',\r\n        minWidth: 170,\r\n        align: 'center',\r\n        format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n        id: 'userid',\r\n        label: 'Propietario',\r\n        minWidth: 170,\r\n        align: 'center',\r\n        format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n        id: 'action',\r\n        label: 'Acciones',\r\n        minWidth: 170,\r\n        align: 'center',\r\n        format: (value) => value.toFixed(2),\r\n    },\r\n];\r\n\r\n\r\n\r\nconst columns = [\r\n    { id: 'name', label: 'Nombres', minWidth: 170 },\r\n    { id: 'surname', label: 'Primer Apellido', minWidth: 100, align: 'center' },\r\n    {\r\n        id: 'lastname',\r\n        label: 'Segundo Apellido',\r\n        minWidth: 170,\r\n        align: 'center',\r\n        format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n        id: 'email',\r\n        label: 'Email',\r\n        minWidth: 170,\r\n        align: 'center',\r\n        format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n        id: 'action',\r\n        label: 'Acciones',\r\n        minWidth: 170,\r\n        align: 'center',\r\n        format: (value) => value.toFixed(2),\r\n    },\r\n];\r\n\r\n\r\n\r\nfunction EditD(d) {\r\n    console.log(d)\r\n}\r\n\r\n\r\nclass MainComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [\r\n            ],\r\n            warehouses: [\r\n            ],\r\n            editModalState: false,\r\n            user: []\r\n        };\r\n    }\r\n\r\n    getAll = async (i) => {\r\n\r\n        let o = await fetch('http://localhost:4200/user', {\r\n            method: 'GET',\r\n            mode: 'cors', // <---\r\n            cache: 'default'\r\n        }).then(response => {\r\n            return response.json();\r\n        })\r\n\r\n        console.log(o)\r\n\r\n        this.setState({ users: o });\r\n\r\n        console.log(this.state.users);\r\n\r\n    }\r\n\r\n\r\n    getAllWare = async (i) => {\r\n\r\n        let o = await fetch('http://localhost:4200/warehouses', {\r\n            method: 'GET',\r\n            mode: 'cors', // <---\r\n            cache: 'default'\r\n        }).then(response => {\r\n            return response.json();\r\n        })\r\n\r\n        console.log(o)\r\n\r\n        this.setState({ warehouses: o });\r\n\r\n        console.log(this.state.users);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAll();\r\n        this.getAllWare();\r\n    }\r\n\r\n    onCreate = () => {\r\n\r\n    }\r\n\r\n\r\n    editUser(u) {\r\n        console.log(u)\r\n        this.setState({ user: u });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container className=\"mainContainer\">\r\n\r\n                <Box\r\n                    boxShadow={2}\r\n                    bgcolor=\"background.paper\"\r\n                    m={1}\r\n                    p={1}\r\n                    style={{ width: '100%', display: 'initial', padding: '30px' }}>\r\n\r\n\r\n                    <p>Listado de usuarios creados en la plataforma</p>\r\n\r\n                    <div style={{ width: '100%' }}>\r\n\r\n                        <CreateUserComponent creation={this.getAll}></CreateUserComponent>         \r\n\r\n                        <TableContainer >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {columns.map((column) => (\r\n                                            <TableCell\r\n                                                key={column.id}\r\n                                                align={column.align}\r\n                                                style={{ minWidth: column.minWidth }}\r\n                                            >\r\n                                                {column.label}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {this.state.users.map((row) => {\r\n                                        return (\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.identificationnumer}>\r\n\r\n                                                <TableCell key={row.surname} align={'left'}>\r\n                                                    {row.name}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell key={row.lastname} align={'center'}>\r\n                                                    {row.surname}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell key={row.email} align={'center'}>\r\n                                                    {row.lastname}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell key={row.phone} align={'center'}>\r\n                                                    {row.email}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell key={row.accountnumber + row.email} align={'center'}>\r\n\r\n                                                    <div style={{ display: 'flex' }}>\r\n                                                        <EditUserComponent edited={this.getAll} data={row} key={row.id}></EditUserComponent>\r\n                                                        <DeleteUserComponent edited={this.getAll} data={row} key={row.id + 'del'}></DeleteUserComponent>\r\n                                                    </div>\r\n\r\n                                                </TableCell>\r\n\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <p style={{marginTop : '150px'}}>Listado de almacenes creados en la plataforma</p>\r\n\r\n                    <div style={{ width: '100%' }}>\r\n\r\n                        <CreateWarehouseComponent creation={this.getAllWare}></CreateWarehouseComponent>\r\n\r\n                        <TableContainer >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {columns2.map((column) => (\r\n                                            <TableCell\r\n                                                key={column.id}\r\n                                                align={column.align}\r\n                                                style={{ minWidth: column.minWidth }}\r\n                                            >\r\n                                                {column.label}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {this.state.warehouses.map((row) => {\r\n                                        return (\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.identificationnumer}>\r\n\r\n                                                <TableCell key={row.name} align={'left'}>\r\n                                                    {row.name}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell key={row.address} align={'center'}>\r\n                                                    {row.address}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell key={row.phone} align={'center'}>\r\n                                                    {row.phone}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell key={row.ownernames} align={'center'}>\r\n                                                    {row.ownernames} {row.surname} {row.lastname} \r\n                                                </TableCell>\r\n\r\n                                                <TableCell key={row.accountnumber + row.email} align={'center'}>\r\n\r\n                                                    <div style={{ display: 'flex' }}>\r\n                                                        <EditWarehouseComponent edited={this.getAllWare} data={row} key={row.id}></EditWarehouseComponent>\r\n                                                        <DeleteWarehouseComponent edited={this.getAllWare} data={row} key={row.id + 'del'}></DeleteWarehouseComponent>\r\n                                                    </div>\r\n\r\n                                                </TableCell>\r\n\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n\r\n                    </div>\r\n\r\n                </Box>\r\n\r\n            </Grid>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default MainComponent","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\users\\edit.js",["88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"import { React, Fragment, Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Edit } from '@material-ui/icons';\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nclass EditUserComponent extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            open: false,\r\n            scroll: 'paper',\r\n\r\n            openTooltip: false,\r\n            tooltopSeverity: 'success',\r\n            tooltopMessage: 'Usuario editado satisfactoriamente',\r\n\r\n            formFields: {\r\n                names: {\r\n                    data: 'Fabio',\r\n                    stateError: false\r\n                },\r\n                lastname: {\r\n                    data: 'Duarte',\r\n                    stateError: false\r\n                },\r\n                surname: {\r\n                    data: 'Mayorga',\r\n                    stateError: false\r\n                },\r\n                phone: {\r\n                    data: '123456481',\r\n                    stateError: false\r\n                },\r\n                email: {\r\n                    data: 'fabio@ecom.co',\r\n                    stateError: false\r\n                },\r\n                identificationnumber: {\r\n                    data: '1235487',\r\n                    stateError: false\r\n                },\r\n                identificationtype: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n                bankaccounttype: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n                accountnumber: {\r\n                    data: '123123123',\r\n                    stateError: false\r\n                },\r\n            }\r\n        }\r\n\r\n        console.log(\"construc\")\r\n\r\n        //this.getAlert = this.getAlert.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //this.props.setClick(this.getAlert);\r\n        console.log(\"cdm\")\r\n\r\n    }\r\n\r\n    getAlert() {\r\n        this.handleToggle();\r\n    }\r\n\r\n    handleToggle = () => {\r\n        this.setState({ open: !this.state.open })\r\n        console.log(this.props.data)\r\n\r\n        this.setState({\r\n            formFields: {\r\n                names: {\r\n                    data: this.props.data.name,\r\n                    stateError: false\r\n                },\r\n                lastname: {\r\n                    data: this.props.data.lastname,\r\n                    stateError: false\r\n                },\r\n                surname: {\r\n                    data: this.props.data.surname,\r\n                    stateError: false\r\n                },\r\n                phone: {\r\n                    data: this.props.data.phone,\r\n                    stateError: false\r\n                },\r\n                email: {\r\n                    data: this.props.data.email,\r\n                    stateError: false\r\n                },\r\n                identificationnumber: {\r\n                    data: this.props.data.identificationnumber,\r\n                    stateError: false\r\n                },\r\n                identificationtype: {\r\n                    data: this.props.data.identificationtype,\r\n                    stateError: false\r\n                },\r\n                bankaccounttype: {\r\n                    data: this.props.data.bankaccounttype,\r\n                    stateError: false\r\n                },\r\n                accountnumber: {\r\n                    data: this.props.data.accountnumber,\r\n                    stateError: false\r\n                },\r\n            }\r\n        })\r\n\r\n        console.log(this.state)\r\n\r\n    }\r\n\r\n    restat = () => {\r\n        console.log(this.state.formFields.names.data.value)\r\n    }\r\n\r\n\r\n    edit = async () => {\r\n\r\n        let data = {\r\n            id: this.props.data.id,\r\n            names: this.state.formFields.names.data.value,\r\n            surname: this.state.formFields.surname.data.value,\r\n            lastname: this.state.formFields.lastname.data.value,\r\n            email: this.state.formFields.email.data.value,\r\n            identificationnumber: this.state.formFields.identificationnumber.data.value,\r\n            identificationtype: this.state.formFields.identificationtype.data.value,\r\n            accountnumber: this.state.formFields.accountnumber.data.value,\r\n            bankaccounttype: this.state.formFields.bankaccounttype.data.value,\r\n            phone: this.state.formFields.phone.data.value,\r\n        }\r\n        console.log(data)\r\n        let o = await fetch('http://localhost:4200/user/edit', {\r\n            method: 'POST',\r\n            cache: 'default',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n\r\n                console.log(response)\r\n                if (response.status == 200 || response.status == 202) {\r\n                    this.setState({ openTooltip: true, tooltopMessage: 'Usuario editado satisfactoriamente.', tooltopSeverity: 'success' })\r\n                    this.handleToggle();\r\n                    this.props.edited();\r\n                } else {\r\n\r\n                    let error = response.json().then(e => {\r\n                        let state = this.state;\r\n                        state.openTooltip = true;\r\n                        state.open = false;\r\n                        state.tooltopMessage = e.message;\r\n                        state.tooltopSeverity = 'error';\r\n                        console.log(state)\r\n                        this.setState(state)\r\n                    });\r\n\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n\r\n    editField(key, value) {\r\n        console.log(value)\r\n        let state = this.state\r\n        state.formFields[key].data = 'asdasd';\r\n\r\n        console.log(state)\r\n        console.log(state.formFields.accountnumber.data.value)\r\n\r\n        let keys = Object.keys(state.formFields)\r\n\r\n        for (let k of keys) {\r\n            if (k != key) {\r\n                state.formFields[k].data = state.formFields[k].data.value;\r\n            } else {\r\n                state.formFields[key].data = value;\r\n            }\r\n        }\r\n        console.log(state)\r\n        this.setState(state);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { open, scroll } = this.state;\r\n\r\n        return (\r\n\r\n            <Fragment>\r\n\r\n                <IconButton variant=\"contained\" color=\"primary\"  style={{margin: 'auto'}} onClick={this.handleToggle}>\r\n                    <Edit color=\"primary\" />\r\n                </IconButton>\r\n\r\n\r\n                <Snackbar open={this.state.openTooltip} autoHideDuration={6000} onClose={() => this.setState({ openTooltip: false })}>\r\n                    <Alert onClose={() => this.setState({ openTooltip: false })} severity={this.state.tooltopSeverity}>\r\n                        {this.state.tooltopMessage}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n                <Dialog open={open} onClose={this.handleToggle} scroll={scroll} fullWidth={true}>\r\n                    <DialogTitle id=\"scroll-dialog-title\">Edición de usuario</DialogTitle>\r\n                    <DialogContent dividers={scroll === 'paper'} >\r\n\r\n                        <form noValidate autoComplete=\"off\">\r\n\r\n                            <div style={{ margin: \"8px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.names.data = c }} id=\"names\" label=\"Nombres\"\r\n                                    name=\"names\"\r\n                                    value={this.state.formFields.names.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('names', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.surname.data = c }} id=\"surname\" label=\"Primer Apellido\"\r\n                                    name=\"surname\"\r\n                                    value={this.state.formFields.surname.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('surname', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.lastname.data = c }} id=\"lastname\" label=\"Segundo Apellido\"\r\n                                    name=\"lastname\"\r\n                                    value={this.state.formFields.lastname.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('lastname', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.email.data = c }} id=\"email\" label=\"Email\"\r\n                                    name=\"email\"\r\n                                    value={this.state.formFields.email.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('email', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.phone.data = c }} id=\"phone\" label=\"Teléfono\"\r\n                                    name=\"phone\"\r\n                                    value={this.state.formFields.phone.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('phone', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n\r\n                                <InputLabel id=\"it-label\">Tipo de documento</InputLabel>\r\n                                <Select\r\n                                    required\r\n                                    labelId=\"it-label\"\r\n                                    id=\"it-select\"\r\n                                    value={this.state.formFields.identificationtype.data}\r\n                                    inputRef={(c) => { this.state.formFields.identificationtype.data = c }}\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('identificationtype', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    <MenuItem value={1}>Cédula de ciudadanía</MenuItem>\r\n                                    <MenuItem value={2}>Cédula de extrangería</MenuItem>\r\n                                    <MenuItem value={3}>Pasaporte</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.identificationnumber.data = c }} id=\"identificationnumber\" label=\"Número documento\"\r\n                                    name=\"identificationnumber\"\r\n                                    value={this.state.formFields.identificationnumber.data}\r\n                                    type=\"number\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('identificationnumber', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <InputLabel id=\"ac-label\">Tipo de cuenta</InputLabel>\r\n                                <Select\r\n                                    required\r\n                                    labelId=\"ac-label\"\r\n                                    id=\"ac-select\"\r\n                                    value={this.state.formFields.bankaccounttype.data}\r\n                                    inputRef={(c) => { this.state.formFields.bankaccounttype.data = c }}\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('bankaccounttype', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    <MenuItem value={1}>Ahorros</MenuItem>\r\n                                    <MenuItem value={2}>Corriente</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required number inputRef={(c) => { this.state.formFields.accountnumber.data = c }} id=\"accountnumber\" label=\"Número de cuenta bancaría\"\r\n                                    name=\"accountnumber\"\r\n                                    type=\"number\"\r\n                                    value={this.state.formFields.accountnumber.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('accountnumber', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleToggle} color=\"primary\"> Cancelar </Button>\r\n                        <Button onClick={this.edit} variant=\"contained\" color=\"primary\">Editar Usuario</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default EditUserComponent","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\users\\delete.js",["103","104","105","106","107","108"],"import { React, Fragment, Component } from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Delete } from '@material-ui/icons';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nclass DeleteUserComponent extends Component {\r\n\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            open: false,\r\n            scroll: 'paper',\r\n\r\n            openTooltip: false,\r\n            tooltopSeverity: 'success',\r\n            tooltopMessage: 'Usuario Creado satisfactoriamente',\r\n\r\n        }\r\n    }\r\n\r\n    handleToggle = () => {\r\n        this.setState({ open: !this.state.open })\r\n    }\r\n\r\n    delete = async () => {\r\n\r\n        let o = await fetch('http://localhost:4200/user/'+this.props.data.id, {\r\n            method: 'DELETE',\r\n            mode: 'cors',\r\n            cache: 'default',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => {\r\n\r\n               console.log(response)\r\n                if (response.status == 200 || response.status == 202) {\r\n                    this.setState({ openTooltip: true, tooltopMessage: 'Usuario eliminado satisfactoriamente.', tooltopSeverity: 'success' })\r\n                    this.handleToggle();\r\n                    this.props.edited();\r\n                } else {\r\n\r\n                    let error = response.json().then(e => {\r\n                        this.setState({ openTooltip: true, tooltopMessage: e.message, tooltopSeverity: 'error' })\r\n                    });\r\n\r\n                } \r\n            })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { open, scroll } = this.state;\r\n\r\n        return (\r\n\r\n            <Fragment>\r\n\r\n                <Snackbar open={this.state.openTooltip} autoHideDuration={6000} onClose={() => this.setState({ openTooltip: false })}>\r\n                    <Alert onClose={() => this.setState({ openTooltip: false })} severity={this.state.tooltopSeverity}>\r\n                        {this.state.tooltopMessage}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n            \r\n                    <IconButton variant=\"contained\" color=\"primary\" style={{margin: 'auto'}} onClick={this.handleToggle}>\r\n                        <Delete color=\"primary\" />\r\n                    </IconButton>\r\n            \r\n\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={this.handleToggle}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\">\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"¿Seguro que deseas borrar este registro?\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">Eliminar el registro asociado a <b>{this.props.data.identificationnumber}</b>  lo borrará permanenetemente Y <b style={{ color : 'tomato'}}>TODOS LOS ALMACENES QUE ESTEN ASOCIADOS A EL.</b></DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleToggle} color=\"primary\">Cancelar</Button>\r\n                        <Button onClick={this.delete} color=\"primary\" autoFocus>ELIMINAR REGISTRO</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default DeleteUserComponent","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\warehouses\\create.js",["109","110","111","112","113","114","115","116","117","118","119","120","121"],"import { React, Fragment, Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Home } from '@material-ui/icons';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nclass CreateWarehouseComponent extends Component {\r\n\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            open: false,\r\n            scroll: 'paper',\r\n\r\n            openTooltip: false,\r\n            tooltopSeverity: 'success',\r\n            tooltopMessage: 'Almacen Creado satisfactoriamente',\r\n            users: [],\r\n            formFields: {\r\n                name: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                address: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                bankaccountnumber: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                phone: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                productid: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n                maxvolume: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                userid: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n                nit: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    handleToggle = () => {\r\n        this.setState({ open: !this.state.open })\r\n        this.getUsers();\r\n    }\r\n\r\n    restat = () => {\r\n        console.log(this.state.formFields.names.data.value)\r\n    }\r\n\r\n    getUsers = async () => {\r\n\r\n        let o = await fetch('http://localhost:4200/user', {\r\n            method: 'GET',\r\n            mode: 'cors', // <---\r\n            cache: 'default'\r\n        }).then(response => {\r\n            return response.json();\r\n        })\r\n\r\n        let state = this.state;\r\n        state.users = o\r\n        this.setState(state)\r\n\r\n    }\r\n\r\n    create = async () => {\r\n\r\n        let data = {\r\n            name: this.state.formFields.name.data.value,\r\n            address : this.state.formFields.address.data.value,\r\n            bankaccountnumber: this.state.formFields.bankaccountnumber.data.value,\r\n            phone: this.state.formFields.phone.data.value,\r\n            productid: this.state.formFields.productid.data.value,\r\n            userid: this.state.formFields.userid.data.value,\r\n            maxvolume: this.state.formFields.maxvolume.data.value,\r\n            nit: this.state.formFields.nit.data.value,\r\n        }\r\n\r\n        let o = await fetch('http://localhost:4200/warehouses', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'default',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n\r\n                console.log(response)\r\n                if (response.status == 200 || response.status == 201) {\r\n                    this.setState({ openTooltip: true, tooltopMessage: 'Almacen creado satisfactoriamente.', tooltopSeverity: 'success' })\r\n                    this.handleToggle();\r\n                    this.props.creation();\r\n                } else {\r\n\r\n                    let error = response.json().then(e => {\r\n                        this.setState({ openTooltip: true, tooltopMessage: e.message, tooltopSeverity: 'error' })\r\n                    });\r\n\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { open, scroll } = this.state;\r\n\r\n        return (\r\n\r\n            <Fragment>\r\n\r\n                <Snackbar open={this.state.openTooltip} autoHideDuration={6000} onClose={() => this.setState({ openTooltip: false })}>\r\n                    <Alert onClose={() => this.setState({ openTooltip: false })} severity={this.state.tooltopSeverity}>\r\n                        {this.state.tooltopMessage}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n                <div>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                        style={{ float: 'right', margin: '30px 0px', backgroundColor: '#4CAF50 !important' }}\r\n                        onClick={this.handleToggle}\r\n                        className=\"successButton\"\r\n                        startIcon={<Home />}\r\n                    > Crear Almacen </Button>\r\n                </div>\r\n\r\n                <Dialog open={open} onClose={this.handleToggle} scroll={scroll} fullWidth={true}>\r\n                    <DialogTitle id=\"scroll-dialog-title\">Creación de Almacen</DialogTitle>\r\n                    <DialogContent dividers={scroll === 'paper'} >\r\n\r\n                        <form noValidate autoComplete=\"off\">\r\n\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n\r\n                                <InputLabel id=\"it-label\">Usuario dueño del almacen</InputLabel>\r\n                                <Select\r\n                                    required\r\n                                    labelId=\"tp-label\"\r\n                                    id=\"u-select\"\r\n                                    inputRef={(c) => { this.state.formFields.userid.data = c }}\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\">\r\n\r\n                                    {this.state.users.map((row) => {\r\n                                        return (\r\n                                            <MenuItem value={row.id}>{row.name} {row.surname} {row.lastname} ({row.identificationnumber}) </MenuItem>\r\n                                        )\r\n                                    })\r\n                                    }\r\n\r\n                                </Select>\r\n                            </div>\r\n\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.nit.data = c }} id=\"nit\" label=\"NIT\"\r\n                                    name=\"nit\"\r\n                                    type=\"number\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n\r\n                            <div style={{ margin: \"8px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.name.data = c }} id=\"name\" label=\"Nombre del Almacen\"\r\n                                    name=\"name\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.name.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.address.data = c }} id=\"address\" label=\"Dirección\"\r\n                                    name=\"address\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.address.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField type=\"number\" required inputRef={(c) => { this.state.formFields.phone.data = c }} id=\"phone\" label=\"Teléfono del establecimiento\"\r\n                                    name=\"phone\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                            console.log(this.state.formFields.phone.data.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.bankaccountnumber.data = c }} id=\"bankaccountnumber\" label=\"Número de cuenta bancaría\"\r\n                                    name=\"bankaccountnumber\"\r\n                                    type=\"number\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                             \r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n\r\n                                <InputLabel id=\"it-label\">Tipo de producto</InputLabel>\r\n                                <Select\r\n                                    required\r\n                                    labelId=\"tp-label\"\r\n                                    id=\"tp-select\"\r\n                                    inputRef={(c) => { this.state.formFields.productid.data = c }}\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\"\r\n                                >\r\n                                    <MenuItem value={1}>Café</MenuItem>\r\n                                    <MenuItem value={2}>Cacao</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.maxvolume.data = c }} id=\"maxvolume\" label=\"Cantidad máxima (Kg)\"\r\n                                    name=\"maxvolume\"\r\n                                    type=\"number\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            console.log(\"you have typed: \", evt.target.value);\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                        </form>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n\r\n                        <Button onClick={this.handleToggle} color=\"primary\"> Cancelar </Button>\r\n                        <Button onClick={this.create} variant=\"contained\" color=\"primary\">Crear Almacen</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CreateWarehouseComponent","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\warehouses\\edit.js",["122","123","124","125","126","127","128","129","130","131","132","133","134","135"],"import { React, Fragment, Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Edit } from '@material-ui/icons';\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nclass EditWarehouseComponent extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            open: false,\r\n            scroll: 'paper',\r\n            users: [],\r\n            openTooltip: false,\r\n            tooltopSeverity: 'success',\r\n            tooltopMessage: 'Almacen editado satisfactoriamente',\r\n            formFields: {\r\n                name: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                address: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                bankaccountnumber: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                phone: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                productid: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n                maxvolume: {\r\n                    data: '',\r\n                    stateError: false\r\n                },\r\n                userid: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n                nit: {\r\n                    data: 1,\r\n                    stateError: false\r\n                },\r\n            }\r\n        }\r\n\r\n        console.log(\"construc\")\r\n\r\n        //this.getAlert = this.getAlert.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //this.props.setClick(this.getAlert);\r\n        console.log(\"cdm\")\r\n\r\n    }\r\n\r\n    getAlert() {\r\n        this.handleToggle();\r\n    }\r\n\r\n     handleToggle = async () => {\r\n        this.setState({ open: !this.state.open })\r\n        console.log(this.props.data.nit)\r\n\r\n        let o = await fetch('http://localhost:4200/user', {\r\n            method: 'GET',\r\n            mode: 'cors', // <---\r\n            cache: 'default'\r\n        }).then(response => {\r\n            return response.json();\r\n        })\r\n       \r\n\r\n        this.setState({\r\n            users: o,\r\n            formFields: {\r\n                name: {\r\n                    data: this.props.data.name,\r\n                    stateError: false\r\n                },\r\n                address: {\r\n                    data: this.props.data.address,\r\n                    stateError: false\r\n                },\r\n                bankaccountnumber: {\r\n                    data: this.props.data.bankaccountnumber,\r\n                    stateError: false\r\n                },\r\n                phone: {\r\n                    data: this.props.data.phone,\r\n                    stateError: false\r\n                },\r\n                productid: {\r\n                    data: this.props.data.productid,\r\n                    stateError: false\r\n                },\r\n                maxvolume: {\r\n                    data: this.props.data.maxvolume,\r\n                    stateError: false\r\n                },\r\n                userid: {\r\n                    data: this.props.data.userid,\r\n                    stateError: false\r\n                },\r\n                nit: {\r\n                    data: this.props.data.nit,\r\n                    stateError: false\r\n                },\r\n            }\r\n        })\r\n\r\n        console.log(this.state)\r\n\r\n    }\r\n\r\n    restat = () => {\r\n        console.log(this.state.formFields.names.data.value)\r\n    }\r\n\r\n\r\n    edit = async () => {\r\n\r\n        let data = {\r\n            id: this.props.data.id,\r\n            name: this.state.formFields.name.data.value,\r\n            address : this.state.formFields.address.data.value,\r\n            bankaccountnumber: this.state.formFields.bankaccountnumber.data.value,\r\n            phone: this.state.formFields.phone.data.value,\r\n            productid: this.state.formFields.productid.data.value,\r\n            userid: this.state.formFields.userid.data.value,\r\n            maxvolume: this.state.formFields.maxvolume.data.value,\r\n            nit: this.state.formFields.nit.data.value,\r\n        }\r\n        console.log(data)\r\n        let o = await fetch('http://localhost:4200/warehouses/edit', {\r\n            method: 'POST',\r\n            cache: 'default',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n\r\n                console.log(response)\r\n                if (response.status == 200 || response.status == 202) {\r\n                    this.setState({ openTooltip: true, tooltopMessage: 'Almacen editado satisfactoriamente.', tooltopSeverity: 'success' })\r\n                    this.handleToggle();\r\n                    this.props.edited();\r\n                } else {\r\n\r\n                    let error = response.json().then(e => {\r\n                        let state = this.state;\r\n                        state.openTooltip = true;\r\n                        state.open = false;\r\n                        state.tooltopMessage = e.message;\r\n                        state.tooltopSeverity = 'error';\r\n                        console.log(state)\r\n                        this.setState(state)\r\n                    });\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n    getUsers = async () => {\r\n\r\n        let o = await fetch('http://localhost:4200/user', {\r\n            method: 'GET',\r\n            mode: 'cors', // <---\r\n            cache: 'default'\r\n        }).then(response => {\r\n            return response.json();\r\n        })\r\n\r\n        let state = this.state;\r\n        state.users = o\r\n        this.setState(state)\r\n\r\n    }\r\n\r\n\r\n    editField(key, value) {\r\n        let state = this.state;\r\n\r\n        let keys = Object.keys(state.formFields)\r\n\r\n        for (let k of keys) {\r\n            if (k != key) {\r\n                state.formFields[k].data = state.formFields[k].data.value;\r\n            } else {\r\n                state.formFields[key].data = value;\r\n            }\r\n        }\r\n        console.log(state)\r\n        this.setState(state);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { open, scroll } = this.state;\r\n\r\n        return (\r\n\r\n            <Fragment>\r\n\r\n                <IconButton variant=\"contained\" color=\"primary\" style={{ margin: 'auto' }} onClick={this.handleToggle}>\r\n                    <Edit color=\"primary\" />\r\n                </IconButton>\r\n\r\n\r\n                <Snackbar open={this.state.openTooltip} autoHideDuration={6000} onClose={() => this.setState({ openTooltip: false })}>\r\n                    <Alert onClose={() => this.setState({ openTooltip: false })} severity={this.state.tooltopSeverity}>\r\n                        {this.state.tooltopMessage}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n                <Dialog open={open} onClose={this.handleToggle} scroll={scroll} fullWidth={true}>\r\n                    <DialogTitle id=\"scroll-dialog-title\">Edición de usuario</DialogTitle>\r\n                    <DialogContent dividers={scroll === 'paper'} >\r\n                        <form noValidate autoComplete=\"off\">\r\n\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n\r\n                                <InputLabel id=\"it-label\">Usuario dueño del almacen</InputLabel>\r\n                                <Select\r\n                                    required\r\n                                    labelId=\"tp-label\"\r\n                                    id=\"u-select\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('userid', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    inputRef={(c) => { this.state.formFields.userid.data = c }}\r\n                                    value={this.state.formFields.userid.data}\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\">\r\n                                        \r\n                                    {this.state.users.map((row) => {\r\n                                        return (\r\n                                            <MenuItem value={row.id}>{row.name} {row.surname} {row.lastname} ({row.identificationnumber}) </MenuItem>\r\n                                        )\r\n                                    })\r\n                                    }\r\n\r\n                                </Select>\r\n                            </div>\r\n\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.nit.data = c }} id=\"nit\" label=\"NIT\"\r\n                                    name=\"nit\"\r\n                                    type=\"number\"\r\n                                    value={this.state.formFields.nit.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('nit', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n\r\n                            <div style={{ margin: \"8px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.name.data = c }} id=\"name\" label=\"Nombre del Almacen\"\r\n                                    name=\"name\"\r\n                                    value={this.state.formFields.name.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('name', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.address.data = c }} id=\"address\" label=\"Dirección\"\r\n                                    name=\"address\"\r\n                                    value={this.state.formFields.address.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('address', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField type=\"number\" required inputRef={(c) => { this.state.formFields.phone.data = c }} id=\"phone\" label=\"Teléfono del establecimiento\"\r\n                                    name=\"phone\"\r\n                                    value={this.state.formFields.phone.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('phone', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.bankaccountnumber.data = c }} id=\"bankaccountnumber\" label=\"Número de cuenta bancaría\"\r\n                                    name=\"bankaccountnumber\"\r\n                                    type=\"number\"\r\n                                    value={this.state.formFields.bankaccountnumber.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('bankaccountnumber', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n\r\n                                <InputLabel id=\"it-label\">Tipo de producto</InputLabel>\r\n                                <Select\r\n                                    required\r\n                                    labelId=\"tp-label\"\r\n                                    id=\"tp-select\"\r\n                                    value={this.state.formFields.productid.data}\r\n                                    inputRef={(c) => { this.state.formFields.productid.data = c }}\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\"\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('productid', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    <MenuItem value={1}>Café</MenuItem>\r\n                                    <MenuItem value={2}>Cacao</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{ margin: \"16px 0px\" }}>\r\n                                <TextField required inputRef={(c) => { this.state.formFields.maxvolume.data = c }} id=\"maxvolume\" label=\"Cantidad máxima (Kg)\"\r\n                                    name=\"maxvolume\"\r\n                                    type=\"number\"\r\n                                    value={this.state.formFields.maxvolume.data}\r\n                                    onChange={\r\n                                        (evt) => {\r\n                                            this.editField('maxvolume', evt.target.value)\r\n                                        }\r\n                                    }\r\n                                    className=\"col-sm-12 col-md-12 col-lg-12\" />\r\n                            </div>\r\n\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleToggle} color=\"primary\"> Cancelar </Button>\r\n                        <Button onClick={this.edit} variant=\"contained\" color=\"primary\">Editar Almacen</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default EditWarehouseComponent","C:\\Users\\fabio\\Desktop\\ECOM\\ecom-prueba-front\\src\\route\\warehouses\\delete.js",["136","137","138","139","140","141"],{"ruleId":"142","severity":1,"message":"143","line":14,"column":48,"nodeType":"144","messageId":"145","endLine":14,"endColumn":52},{"ruleId":"142","severity":1,"message":"146","line":41,"column":7,"nodeType":"144","messageId":"145","endLine":41,"endColumn":14},{"ruleId":"142","severity":1,"message":"147","line":67,"column":10,"nodeType":"144","messageId":"145","endLine":67,"endColumn":20},{"ruleId":"142","severity":1,"message":"148","line":150,"column":10,"nodeType":"144","messageId":"145","endLine":150,"endColumn":14},{"ruleId":"142","severity":1,"message":"149","line":151,"column":10,"nodeType":"144","messageId":"145","endLine":151,"endColumn":21},{"ruleId":"142","severity":1,"message":"150","line":153,"column":9,"nodeType":"144","messageId":"145","endLine":153,"endColumn":25},{"ruleId":"142","severity":1,"message":"151","line":157,"column":9,"nodeType":"144","messageId":"145","endLine":157,"endColumn":32},{"ruleId":"142","severity":1,"message":"152","line":162,"column":7,"nodeType":"144","messageId":"145","endLine":162,"endColumn":11},{"ruleId":"142","severity":1,"message":"153","line":176,"column":9,"nodeType":"144","messageId":"145","endLine":176,"endColumn":13},{"ruleId":"142","severity":1,"message":"154","line":178,"column":9,"nodeType":"144","messageId":"145","endLine":178,"endColumn":10},{"ruleId":"142","severity":1,"message":"155","line":23,"column":7,"nodeType":"144","messageId":"145","endLine":23,"endColumn":16},{"ruleId":"142","severity":1,"message":"154","line":110,"column":13,"nodeType":"144","messageId":"145","endLine":110,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":122,"column":37,"nodeType":"158","messageId":"159","endLine":122,"endColumn":39},{"ruleId":"156","severity":1,"message":"157","line":122,"column":63,"nodeType":"158","messageId":"159","endLine":122,"endColumn":65},{"ruleId":"142","severity":1,"message":"160","line":128,"column":25,"nodeType":"144","messageId":"145","endLine":128,"endColumn":30},{"ruleId":"161","severity":1,"message":"162","line":171,"column":72,"nodeType":"163","endLine":171,"endColumn":99},{"ruleId":"161","severity":1,"message":"162","line":182,"column":72,"nodeType":"163","endLine":182,"endColumn":101},{"ruleId":"161","severity":1,"message":"162","line":194,"column":72,"nodeType":"163","endLine":194,"endColumn":102},{"ruleId":"161","severity":1,"message":"162","line":205,"column":72,"nodeType":"163","endLine":205,"endColumn":99},{"ruleId":"161","severity":1,"message":"162","line":217,"column":72,"nodeType":"163","endLine":217,"endColumn":99},{"ruleId":"161","severity":1,"message":"162","line":236,"column":56,"nodeType":"163","endLine":236,"endColumn":96},{"ruleId":"161","severity":1,"message":"162","line":245,"column":72,"nodeType":"163","endLine":245,"endColumn":114},{"ruleId":"161","severity":1,"message":"162","line":263,"column":56,"nodeType":"163","endLine":263,"endColumn":93},{"ruleId":"161","severity":1,"message":"162","line":271,"column":79,"nodeType":"163","endLine":271,"endColumn":114},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"164","replacedBy":"168"},{"ruleId":"166","replacedBy":"169"},{"ruleId":"142","severity":1,"message":"170","line":5,"column":8,"nodeType":"144","messageId":"145","endLine":5,"endColumn":18},{"ruleId":"142","severity":1,"message":"171","line":11,"column":8,"nodeType":"144","messageId":"145","endLine":11,"endColumn":23},{"ruleId":"142","severity":1,"message":"172","line":13,"column":10,"nodeType":"144","messageId":"145","endLine":13,"endColumn":21},{"ruleId":"142","severity":1,"message":"173","line":13,"column":23,"nodeType":"144","messageId":"145","endLine":13,"endColumn":35},{"ruleId":"142","severity":1,"message":"174","line":13,"column":37,"nodeType":"144","messageId":"145","endLine":13,"endColumn":46},{"ruleId":"142","severity":1,"message":"143","line":13,"column":48,"nodeType":"144","messageId":"145","endLine":13,"endColumn":52},{"ruleId":"142","severity":1,"message":"175","line":15,"column":10,"nodeType":"144","messageId":"145","endLine":15,"endColumn":18},{"ruleId":"142","severity":1,"message":"176","line":17,"column":8,"nodeType":"144","messageId":"145","endLine":17,"endColumn":13},{"ruleId":"142","severity":1,"message":"177","line":84,"column":10,"nodeType":"144","messageId":"145","endLine":84,"endColumn":15},{"ruleId":"142","severity":1,"message":"155","line":22,"column":7,"nodeType":"144","messageId":"145","endLine":22,"endColumn":16},{"ruleId":"142","severity":1,"message":"154","line":167,"column":13,"nodeType":"144","messageId":"145","endLine":167,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":178,"column":37,"nodeType":"158","messageId":"159","endLine":178,"endColumn":39},{"ruleId":"156","severity":1,"message":"157","line":178,"column":63,"nodeType":"158","messageId":"159","endLine":178,"endColumn":65},{"ruleId":"142","severity":1,"message":"160","line":184,"column":25,"nodeType":"144","messageId":"145","endLine":184,"endColumn":30},{"ruleId":"156","severity":1,"message":"178","line":211,"column":19,"nodeType":"158","messageId":"159","endLine":211,"endColumn":21},{"ruleId":"161","severity":1,"message":"162","line":247,"column":72,"nodeType":"163","endLine":247,"endColumn":99},{"ruleId":"161","severity":1,"message":"162","line":258,"column":72,"nodeType":"163","endLine":258,"endColumn":101},{"ruleId":"161","severity":1,"message":"162","line":270,"column":72,"nodeType":"163","endLine":270,"endColumn":102},{"ruleId":"161","severity":1,"message":"162","line":281,"column":72,"nodeType":"163","endLine":281,"endColumn":99},{"ruleId":"161","severity":1,"message":"162","line":293,"column":72,"nodeType":"163","endLine":293,"endColumn":99},{"ruleId":"161","severity":1,"message":"162","line":313,"column":56,"nodeType":"163","endLine":313,"endColumn":96},{"ruleId":"161","severity":1,"message":"162","line":327,"column":72,"nodeType":"163","endLine":327,"endColumn":114},{"ruleId":"161","severity":1,"message":"162","line":346,"column":56,"nodeType":"163","endLine":346,"endColumn":93},{"ruleId":"161","severity":1,"message":"162","line":359,"column":79,"nodeType":"163","endLine":359,"endColumn":114},{"ruleId":"142","severity":1,"message":"155","line":21,"column":7,"nodeType":"144","messageId":"145","endLine":21,"endColumn":16},{"ruleId":"142","severity":1,"message":"154","line":52,"column":13,"nodeType":"144","messageId":"145","endLine":52,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":63,"column":37,"nodeType":"158","messageId":"159","endLine":63,"endColumn":39},{"ruleId":"156","severity":1,"message":"157","line":63,"column":63,"nodeType":"158","messageId":"159","endLine":63,"endColumn":65},{"ruleId":"142","severity":1,"message":"160","line":69,"column":25,"nodeType":"144","messageId":"145","endLine":69,"endColumn":30},{"ruleId":"142","severity":1,"message":"179","line":81,"column":23,"nodeType":"144","messageId":"145","endLine":81,"endColumn":29},{"ruleId":"142","severity":1,"message":"155","line":23,"column":7,"nodeType":"144","messageId":"145","endLine":23,"endColumn":16},{"ruleId":"142","severity":1,"message":"154","line":121,"column":13,"nodeType":"144","messageId":"145","endLine":121,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":133,"column":37,"nodeType":"158","messageId":"159","endLine":133,"endColumn":39},{"ruleId":"156","severity":1,"message":"157","line":133,"column":63,"nodeType":"158","messageId":"159","endLine":133,"endColumn":65},{"ruleId":"142","severity":1,"message":"160","line":139,"column":25,"nodeType":"144","messageId":"145","endLine":139,"endColumn":30},{"ruleId":"161","severity":1,"message":"162","line":188,"column":56,"nodeType":"163","endLine":188,"endColumn":84},{"ruleId":"161","severity":1,"message":"162","line":203,"column":72,"nodeType":"163","endLine":203,"endColumn":97},{"ruleId":"161","severity":1,"message":"162","line":216,"column":72,"nodeType":"163","endLine":216,"endColumn":98},{"ruleId":"161","severity":1,"message":"162","line":227,"column":72,"nodeType":"163","endLine":227,"endColumn":101},{"ruleId":"161","severity":1,"message":"162","line":239,"column":86,"nodeType":"163","endLine":239,"endColumn":113},{"ruleId":"161","severity":1,"message":"162","line":250,"column":72,"nodeType":"163","endLine":250,"endColumn":111},{"ruleId":"161","severity":1,"message":"162","line":267,"column":56,"nodeType":"163","endLine":267,"endColumn":87},{"ruleId":"161","severity":1,"message":"162","line":275,"column":72,"nodeType":"163","endLine":275,"endColumn":103},{"ruleId":"142","severity":1,"message":"155","line":22,"column":7,"nodeType":"144","messageId":"145","endLine":22,"endColumn":16},{"ruleId":"142","severity":1,"message":"154","line":167,"column":13,"nodeType":"144","messageId":"145","endLine":167,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":178,"column":37,"nodeType":"158","messageId":"159","endLine":178,"endColumn":39},{"ruleId":"156","severity":1,"message":"157","line":178,"column":63,"nodeType":"158","messageId":"159","endLine":178,"endColumn":65},{"ruleId":"142","severity":1,"message":"160","line":184,"column":25,"nodeType":"144","messageId":"145","endLine":184,"endColumn":30},{"ruleId":"156","severity":1,"message":"178","line":221,"column":19,"nodeType":"158","messageId":"159","endLine":221,"endColumn":21},{"ruleId":"161","severity":1,"message":"162","line":268,"column":56,"nodeType":"163","endLine":268,"endColumn":84},{"ruleId":"161","severity":1,"message":"162","line":284,"column":72,"nodeType":"163","endLine":284,"endColumn":97},{"ruleId":"161","severity":1,"message":"162","line":298,"column":72,"nodeType":"163","endLine":298,"endColumn":98},{"ruleId":"161","severity":1,"message":"162","line":309,"column":72,"nodeType":"163","endLine":309,"endColumn":101},{"ruleId":"161","severity":1,"message":"162","line":321,"column":86,"nodeType":"163","endLine":321,"endColumn":113},{"ruleId":"161","severity":1,"message":"162","line":332,"column":72,"nodeType":"163","endLine":332,"endColumn":111},{"ruleId":"161","severity":1,"message":"162","line":351,"column":56,"nodeType":"163","endLine":351,"endColumn":87},{"ruleId":"161","severity":1,"message":"162","line":364,"column":72,"nodeType":"163","endLine":364,"endColumn":103},{"ruleId":"142","severity":1,"message":"155","line":21,"column":7,"nodeType":"144","messageId":"145","endLine":21,"endColumn":16},{"ruleId":"142","severity":1,"message":"154","line":51,"column":13,"nodeType":"144","messageId":"145","endLine":51,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":62,"column":37,"nodeType":"158","messageId":"159","endLine":62,"endColumn":39},{"ruleId":"156","severity":1,"message":"157","line":62,"column":63,"nodeType":"158","messageId":"159","endLine":62,"endColumn":65},{"ruleId":"142","severity":1,"message":"160","line":68,"column":25,"nodeType":"144","messageId":"145","endLine":68,"endColumn":30},{"ruleId":"142","severity":1,"message":"179","line":80,"column":23,"nodeType":"144","messageId":"145","endLine":80,"endColumn":29},"no-unused-vars","'Edit' is defined but never used.","Identifier","unusedVar","'columns' is assigned a value but never used.","'createData' is defined but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'handleChangePage' is assigned a value but never used.","'handleChangeRowsPerPage' is assigned a value but never used.","'rows' is assigned a value but never used.","'edit' is assigned a value but never used.","'o' is assigned a value but never used.","'useStyles' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'error' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-native-reassign",["180"],"no-negated-in-lhs",["181"],["180"],["181"],"'IconButton' is defined but never used.","'TablePagination' is defined but never used.","'ChevronLeft' is defined but never used.","'ChevronRight' is defined but never used.","'PeopleAlt' is defined but never used.","'DataGrid' is defined but never used.","'axios' is defined but never used.","'EditD' is defined but never used.","Expected '!==' and instead saw '!='.","'scroll' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]